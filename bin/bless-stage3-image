#!/bin/bash

# By default 1) install the registration key, 2) install Edge Processor key, 3) install the wvdial.conf with the AoT APN,
# 4) disable sudo, and 5) set the AoT root password.
#
# Disable any of these actions except 1 and 2 with approprite options

set -x
set -e

configure_from_repository() {
  # Use the private_config repository to obtain the blessing.

  if [ ! -e 'private_config' ]; then
    echo "Attempting to clone the private_config repository..."

    if [ ! -e ${KEY_PATH} ]; then
      echo
      echo "Error: no such key path ${KEY_PATH}"
      echo
      exit 2
    fi

    #sets SSH_AGENT_PID
    eval "$(ssh-agent -s)"
    sleep 1
    ssh-add ${KEY_PATH}

    ssh -oBatchMode=yes -T git@github.com 2>&1 | grep 'successfully authenticated'
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
      echo
      echo "Error: unable to authenticate to GitHub"
      echo
      kill -9 ${SSH_AGENT_PID}
      exit 3
    fi
    git clone git@github.com:waggle-sensor/private_config.git

    kill -9 ${SSH_AGENT_PID}
  fi


  if [ "${ODROID_MODEL}" == "ODROIDC" ]; then
    # install registration key
    echo "Installing node registration key..."
    cp private_config/node_creds/id_rsa_waggle_aot_registration ${MOUNT_POINT}/root/id_rsa_waggle_registration
    chmod 400 ${MOUNT_POINT}/root/id_rsa_waggle_registration

    # install Edge Processor key
    echo "Installing Edge Processor key..."
    mkdir -p ${MOUNT_POINT}/usr/lib/waggle/SSL/edge_processor
    cp private_config/node_creds/id_rsa_waggle_aot_edge_processor ${MOUNT_POINT}/usr/lib/waggle/SSL/edge_processor/id_rsa_waggle_edge_processor
    chmod 400 ${MOUNT_POINT}/usr/lib/waggle/SSL/edge_processor/id_rsa_waggle_edge_processor

    # install wvdial.conf
    if [ ${DISABLE_WVDIAL} -eq 0 ]; then
      echo "Installing AoT wvdial.conf..."
      cp private_config/etc/wvdial.conf ${MOUNT_POINT}/etc/wvdial.conf
      chmod 400 ${MOUNT_POINT}/etc/wvdial.conf
    else
      cp ${MOUNT_POINT}/usr/lib/waggle/nodecontroller/etc/wvdial ${MOUNT_POINT}/etc/wvdial.conf
    fi
  fi

  # enable sudo
  if [ ${ENABLE_SUDO} -eq 1 ]; then
    echo "Enabling sudo for the 'waggle' user..."
    sed -i -e "s/^sudo:x:27:.*/sudo:x:27:waggle/" ${MOUNT_POINT}/etc/group
  fi

  # set default root password and
  # install lock and unlock scripts
  echo "Generating AoT and waggle root passwords under /root..."
  mkdir -p ${MOUNT_POINT}/etc/passwds

  if [ "${ODROID_MODEL}" == "ODROIDC" ]; then
    cp private_config/shadow_password/shadow_c1p_nc/shadow_aot ${MOUNT_POINT}/etc/passwds/shadow_aot
    chmod 640 ${MOUNT_POINT}/etc/passwds/shadow_aot
    cp private_config/shadow_password/shadow_c1p_nc/shadow_waggle ${MOUNT_POINT}/etc/passwds/shadow_waggle
    chmod 640 ${MOUNT_POINT}/etc/passwds/shadow_waggle
  elif [ "${ODROID_MODEL}" == "ODROID-XU4" ] || [ "${ODROID_MODEL}" == "ODROID-XU3" ]; then
    cp private_config/shadow_password/shadow_xu4_ep/shadow_aot ${MOUNT_POINT}/etc/passwds/shadow_aot
    chmod 640 ${MOUNT_POINT}/etc/passwds/shadow_aot
    cp private_config/shadow_password/shadow_xu4_ep/shadow_waggle ${MOUNT_POINT}/etc/passwds/shadow_waggle
    chmod 640 ${MOUNT_POINT}/etc/passwds/shadow_waggle
  fi

  ln -sf /etc/passwds/shadow_waggle ${MOUNT_POINT}/etc/shadow

  waggle_image_dir=$(dirname "${BASH_SOURCE[0]}")
  echo "Installing waggle-lock and unlock scripts..."
  cp ${waggle_image_dir}/node_bin/waggle-pw-lock ${MOUNT_POINT}/usr/bin/waggle-pw-lock
  chown root:root ${MOUNT_POINT}/usr/bin/waggle-pw-lock
  chmod 700 ${MOUNT_POINT}/usr/bin/waggle-pw-lock

  cp ${waggle_image_dir}/node_bin/waggle-pw-unlock ${MOUNT_POINT}/usr/bin/waggle-pw-unlock
  chown root:root ${MOUNT_POINT}/usr/bin/waggle-pw-unlock
  chmod 700 ${MOUNT_POINT}/usr/bin/waggle-pw-unlock

  if [ ${CLEAN_UP} -eq 1 ]; then
    rm -rf private_config
  fi
}


clone_configuration() {
  # Obtain the blessing from the currently running system (assumed to be a node).

  local user=$(whoami)
  if [ "${user}" != "root" ]; then
    echo "Error: please re-run this script as the root user."
    exit 3
  fi

  if [ "${ODROID_MODEL}" == "ODROIDC" ]; then
    # copy credentials
    echo "Copying local node credentials and Edge Processor key to ${MOUNT_POINT}..."
    mkdir -p ${MOUNT_POINT}/usr/lib/waggle/SSL/
    cp -Rf /usr/lib/waggle/SSL/* ${MOUNT_POINT}/usr/lib/waggle/SSL/

    # install wvdial.conf
    if [ ${DISABLE_WVDIAL} -eq 0 ]; then
      echo "Copying AoT wvdial.conf to ${MOUNT_POINT}..."
      cp /etc/wvdial.conf ${MOUNT_POINT}/etc/wvdial.conf
    fi
  fi

  # enable sudo
  if [ ${ENABLE_SUDO} -eq 1 ]; then
    echo "Copying /etc/group to ${MOUNT_POINT}..."
    cp /etc/group ${MOUNT_POINT}/etc/group
  fi

  # set AoT root password
  if [ ${DISABLE_ROOT_PASS} -eq 0 ]; then
    # copy system passwords
    echo "Copying /etc/shadow to ${MOUNT_POINT}..."
    cp /etc/shadow ${MOUNT_POINT}/etc/shadow
  fi
}

PRINT_USAGE=0
CLONE=0
DISABLE_WVDIAL=0
ENABLE_SUDO=0
DISABLE_ROOT_PASS=0
CLEAN_UP=0
KEY_PATH='/root/certs/id_rsa_waggle_aot_config'
MOUNT_POINT=''
set -e
while [[ $# -gt 0 ]]; do
  opt="$1"
  arg="$2"
  # echo "Key: $key"
  case $opt in
    --help)
      PRINT_USAGE=1
      ;;
    -n|--clone)
      CLONE=1
      ;;
    -w|--disable-wvdial)
      DISABLE_WVDIAL=1
      ;;
    -s|--enable-sudo)
      ENABLE_SUDO=1
      ;;
    -r|--disable-root-pass)
      DISABLE_ROOT_PASS=1
      ;;
    -c|--clean-up)
      CLEAN_UP=1
      ;;
    -k)
      KEY_PATH=$(readlink -f "$arg")
      shift
      ;;
    --key-path=*)
      KEY_PATH=$(readlink -f "${opt#*=}")
      ;;
    *)
      MOUNT_POINT=$(readlink -f "$opt")
      ;;
  esac
  shift
done
set +e

# Detect the Odroid model. This yields either ODROIDC or ODROID-XU3.
declare -r ODROID_MODEL=$(cat /proc/cpuinfo | grep Hardware | grep -o "[^ ]*$")

print_usage() {
  echo
  echo "Warning: this script has not been updated to take advantage of the build configuration database."
  echo
  echo "Usage: bless-stage3-image [--help] [-w|--disable-wvdial] [-s|--enable-sudo] [-r|--disable-root-pass] [-c|--clean-up] [-k <key-path>|--key-path=<key-path>] <mount-point>"
  echo
}
if [ ${PRINT_USAGE} -eq 1 ]; then
  print_usage
  exit 0
fi

if [ "x${MOUNT_POINT}" == "x" ]; then
  echo
  echo "Error: no mount point specified"
  print_usage
  exit 1
fi

if [ ${CLONE} -eq 1 ]; then
  clone_configuration
else
  configure_from_repository
fi
