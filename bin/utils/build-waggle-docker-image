#!/usr/bin/env python3

import getopt
import os
import os.path
import re
import shutil
import subprocess
import sys
import tempfile
import time

waggle_image_directory = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, '%s/lib/python/' % waggle_image_directory)
from waggle.build import *

config_db_path = os.path.realpath('{}/config/build_config.json'.format(waggle_image_directory))
build_config = Configuration(str(config_db_path))


def print_usage():
    usage_message = "Usage: build-waggle-docker-image [OPTIONS]\n"\
                    "OPTIONS\n"\
                    "  --help                         "\
                    "show this usage message\n"\
                    "  -l |--build-dir=<build_dir>    "\
                    "work on the disk image in the <build_dir> directory\n"\
                    "  -n |--node-controller    "\
                    "build the Node Controller Waggle Docker image\n"\
                    "  -e |--edge-processor    "\
                    "build the Edge Processor Waggle Docker image\n"\
                    "  -v |--version=<version>    "\
                    "show this usage message\n"\
                    "  -r |--revision=<revision>    "\
                    "build revision <revision> of the specified version\n"\
                    "  -d |--deployment=<deployment>    "\
                    "configure the image according to deployment <deployment>\n"\
                    ""
    print(usage_message)

def generate_repositories_string(build, repositories):
  version = build['published_version']
  revision = build['revision']
  repository_strings = []
  for repository in repositories:
    if revision == 0:
      repository_strings.append("{}:v{}".format(repository, version))
    else:
      repository_strings.append("{}:{}".format(repository, build[repository+'_commit']))
  return ','.join(repository_strings)

def main(argv):
  try:
    opts, args = getopt.getopt(argv, "b:nev:r:d:", ["help", "build-dir=", "node-controller", "edge-processor", "version=", "revision=", "deployment="])
  except getopt.GetoptError as ge:
    print("\nError:", str(ge))
    print_usage()
    sys.exit(1)

  build_directory = './'
  node_controller = False
  edge_processor = False
  version = None
  revision = None
  deployment_name = 'Public'
  for opt, arg in opts:
    if opt == '--help':
      print("\n" + usage_message + "\n")
      sys.exit(0)
    elif opt in ('-b', '--build-dir'):
      build_dir = arg
    elif opt in ('-n', '--node-controller'):
      node_controller = True
    elif opt in ('-e', '--edge-processor'):
      edge_processor = True
    elif opt in ('-v', '--version'):
      version = arg
    elif opt in ('-r', '--revision'):
      revision = int(arg)
    elif opt in ('-d', '--deployment'):
      deployment_name = arg
    else:
      print("\n" + usage_message + "\n")
      sys.exit(2)

  architecture = 'x86_64'
  architecture_id = build_config.get_cpu_architecture(architecture).eid

  if version == None:
    version, tmp_revision = build_config.get_latest_build(architecture)
    if revision == None:
      revision = tmp_revision
  else:
    if revision == None:
      revision = int(0)

  deployment = build_config.get_deployment(deployment_name)
  if deployment == None:
    print("Error: unable to find deployment with name '{}'".format(deployment))
    sys.exit(3)

  server_host = build_config.get_beehive_host(eid=deployment['beehive_host'])['address']

  
  os.chdir(waggle_image_directory)
  branches = subprocess.check_output(['git', 'branch']).decode().split('\n')
  branch = [b for b in branches if '*' in b][0][2:]
  # print("Building branch '{}'...".format(branch))

  build = build_config.get_build(version, revision, architecture_id)
  if build == None:
    print("Error: unable to find build with version '{}', revision '{}', and "\
          "architecture '{}'".format(version, revision, architecture))
    sys.exit(4)

  # TODO: bless image according to the deployment configuration

  if node_controller:
    print('Building Node Controller Waggle image...')
    base = build_config.get_base(eid=build['nc_base'])
    if base == None:
      print("Error: unable to find base with DB id '{}'".format(build['nc_base']))
      sys.exit(5)
    base_date = base['date']
    repositories = ['core', 'nodecontroller', 'plugin_manager']
    repositories_string = generate_repositories_string(build, repositories)

    rc = subprocess.check_call(["docker", "build", "-t", "waggle-node-controller:{}".format(base_date),
                                "-f", "dockerfiles/waggle-node-controller",
                                "--build-arg", "base_version={}".format(base_date),
                                "--build-arg", "repositories={}".format(repositories_string),
                                "--build-arg", "server_host={}".format(server_host),
                                "./"])
    if rc != 0:
      print("Error: docker build of Node Controller image exited with return code '{}'".format(rc))
      sys.exit(rc)

  if edge_processor:
    print('Building Edge Processor Waggle image...')
    base = build_config.get_base(eid=build['ep_base'])
    if base == None:
      print("Error: unable to find base with DB id '{}'".format(build['ep_base']))
      sys.exit(5)
    base_date = base['date']
    repositories = ['core', 'edge_processor']
    repositories_string = generate_repositories_string(build, repositories)

    rc = subprocess.check_call(["docker", "build", "-t", "waggle-edge-processor:{}".format(base_date),
                                "-f", "dockerfiles/waggle-edge-processor",
                                "--build-arg", "base_version={}".format(base_date),
                                "--build-arg", "repositories={}".format(repositories_string),
                                "--build-arg", "server_host={}".format(server_host),
                                "./"])
    if rc != 0:
      print("Error: docker build of Edge Processor image exited with return code '{}'".format(rc))
      sys.exit(rc)

if __name__ == '__main__':
    main(sys.argv[1:])
