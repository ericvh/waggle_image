#!/usr/bin/env python3

import copy
import getopt
import os
import os.path
import re
import subprocess
import sys
import time

config_directory = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.realpath('{}/../lib/python/'.format(config_directory)))
import waggle.build as build

def main(argv):
  usage_message = ''.join(("Usage: get-latest-build [OPTIONS]\n", \
                          "OPTIONS\n", \
                          "  --help                          ", \
                          "print this help screen\n", \
                          "  -a |--architecture=<architecture>   "))
  try:
    opts, args = getopt.getopt(
      argv, ":a:",
      ["help", "architecture="])
  except getopt.GetoptError as ge:
    print("\nError:", str(ge))
    print(usage_message + "\n")
    sys.exit(1)

  architecture_name = None
  for opt, arg in opts:
    if opt == '--help':
      print("\n" + usage_message + "\n")
      sys.exit(0)
    elif opt in ('-a', '--architecture'):
      architecture_name = arg
    else:
      print("\n" + usage_message + "\n")
      sys.exit(2)

  if architecture_name == None:
    architecture_name = 'armv7l'

  script_dir = os.path.dirname(os.path.abspath(__file__))

  build_config = build.Configuration(os.path.join(script_dir, 'build_config.json'))

  version_revision = build_config.get_latest_build(architecture_name)
  if version_revision == None:
    print("Error: unable to find any builds with CPU architecture '{}'".format(architecture_name))
    sys.exit(3)
  print('{}-{}'.format(version_revision[0], version_revision[1]))

if __name__ == '__main__':
  main(sys.argv[1:])
