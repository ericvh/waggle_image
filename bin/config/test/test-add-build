#!/bin/bash

rm -rf temp
mkdir -p temp lib/python/waggle
cp -Rf ../../lib .
declare -r files=("initialize-configuration-db" "add-build")
for file in ${files[@]}; do
  if [ ! -f "../$file" ]; then
    echo "Error: file $file does not exist!"
    exit 1
  fi
  cp ../$file temp
done
cd temp

./initialize-configuration-db > /dev/null

test_count=0
pass_count=0

assert_equals() {
  local -r actual=$1
  local -r expected=$2
  ((test_count++))
  if [ "$actual" == "$expected" ]; then
    ((pass_count++))
    echo "[0;32;1m[PASS][0;30;39m"
  else
    echo "[0;31;1m[FAIL][0;30;39m"
  fi
  echo
}

declare -r date=$(date +%Y-%m-%d)

# test adding a new version with the default arch (1) [expect success]
echo "[0;33;1m[TEST][0;30;39m new version w/ default arch (success test)"
output=$(./add-build --version=1.2.3)
echo $output | grep -o "1.2.3 (0) armv7l $date..*armv7l..*armv7l"
assert_equals $? 0

# test adding a new architecture [expect success]
echo "[0;33;1m[TEST][0;30;39m new architecture (success test)"
output=$(./add-build --version=1.2.3 --revision=0 --architecture=x86_64 --nc-base=2 --ep-base=4)
echo $output | grep -o "1.2.3 (0) x86_64 $date..*x86_64..*x86_64"
assert_equals $? 0

# test adding an existing architecture [expect failure]
echo "[0;33;1m[TEST][0;30;39m existing architecture (failure test)"
./add-build --version=1.2.3 --revision=0 --architecture=armv7l --nc-base=1 --ep-base=3\
  | grep -o "Error: build with version '1.2.3', revision '0', and architecture 'armv7l' already exists"
assert_equals $? 0

# test adding a new version with a specified revision [expect failure]
echo "[0;33;1m[TEST][0;30;39m new version w/ specified revision (failure test)"
./add-build --version=1.2.5 --revision=0 | grep -o "Error: revision specified for new version"
assert_equals $? 0

# test adding a new version with a non-default architecture [expect success]
echo "[0;33;1m[TEST][0;30;39m new version with non-default deployment (success test)"
output=$(./add-build --version=1.2.6 --architecture=x86_64 --nc-base=2 --ep-base=4)
echo $output | grep -o "1.2.6 (0) x86_64 $date..*x86_64..*x86_64"
assert_equals $? 0

# test adding a new version with a specified date [expect success]
echo "[0;33;1m[TEST][0;30;39m new version w/ specified date (success test)"
./add-build --version=1.2.7 --date=1942-12-01  | grep -o '1.2.7 (0) armv7l 1942-12-01'
assert_equals $? 0

echo "${pass_count} out of ${test_count} tests passed"

cd ..
rm -rf temp lib
